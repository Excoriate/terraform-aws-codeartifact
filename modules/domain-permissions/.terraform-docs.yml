---
formatter: markdown table

sections:
  hide: []
  show:
    - inputs
    - outputs
    - resources

content: |-
  # AWS CodeArtifact Domain Permissions Module

  ## Overview

  This Terraform module manages the resource-based permissions policy for an **existing** AWS CodeArtifact Domain. It allows controlled access to domain resources through either a dynamically constructed policy or a complete policy override.

  ### üîë Key Features
  - **Policy Management**: Applies or updates the `aws_codeartifact_domain_permissions_policy` for a specified domain.
  - **Dynamic Policy Construction**: Builds a policy based on lists of principals for common actions (`read_principals`, `list_repo_principals`, `authorization_token_principals`) and merges custom IAM statements (`custom_policy_statements`). Includes a default statement granting the domain owner basic read access.
  - **Policy Override**: Allows providing a complete JSON policy document via `policy_document_override`, which takes precedence over dynamic construction.
  - **Conditional Creation**: Creates the policy resource only if the module is enabled AND either `policy_document_override` is provided OR at least one dynamic principal/statement list is non-empty.
  - **Cross-Account Support**: Handles domains owned by different AWS accounts using `domain_owner`.
  - **Modular Design**: Decouples policy management from domain creation.

  ### üìã Usage Guidelines
  1. Ensure the target CodeArtifact domain (specified by `domain_name`) exists in the correct AWS account and region.
  2. **Choose Policy Method:**
     *   **Option A (Policy Override):** Provide a complete, valid JSON policy string to `var.policy_document_override`. All other policy-related inputs (`read_principals`, `list_repo_principals`, etc.) will be ignored by the module. This is useful for complex policies or externally managed policies.
     *   **Option B (Dynamic Construction):** Leave `var.policy_document_override` as `null`. Provide principals and/or custom statements using `var.read_principals`, `var.list_repo_principals`, `var.authorization_token_principals`, and `var.custom_policy_statements`. The module will construct a policy including a default statement for the owner plus statements based on your inputs. **Note:** If all these dynamic inputs are empty/null, no policy resource will be created by default (unless `policy_document_override` is used).
  3. If the domain is in another AWS account, specify its account ID in `var.domain_owner`.
  4. Use `var.policy_revision` for optimistic locking if managing policy updates concurrently.
  5. Set `var.is_enabled` to `false` to prevent the module from creating the policy resource.

  **Example (Dynamic Construction):**
  ```hcl
  module "codeartifact_domain_permissions" {
    source = "path/to/module"

    # Basic Configuration
    is_enabled  = true
    domain_name = "my-company-packages"

    # Baseline Permissions (Example)
    read_principals      = ["arn:aws:iam::111122223333:role/ReaderRole"]
    list_repo_principals = ["arn:aws:iam::111122223333:role/DeveloperRole"]

    # Custom Permissions (Example)
    custom_policy_statements = [
        {
          Effect = "Allow"
          Principal = { AWS = "arn:aws:iam::123456789012:role/DeveloperRole" }
          Action = [
            "codeartifact:ReadFromRepository",
            "codeartifact:DescribeRepository",
            "codeartifact:ListRepositories"
          ]
          Resource = "*"
        }
      ]
    })

    # Optional: Specify domain owner if different account
    # domain_owner = "123456789012"

    # Tagging
    tags = {
      Environment = "production"
      Project     = "package-management"
      ManagedBy   = "Terraform"
    }
  }
  ```

  ## Security Considerations

  - üîí Follow least privilege principle in domain policies
  - üë• Use targeted Principal declarations instead of wildcards
  - üîê Limit repository creation and deletion rights
  - üìù Regularly audit domain policies

  ## Policy Structure Guidelines

  - Define specific actions instead of using wildcards
  - Explicitly list resources when possible
  - Consider separating read and write permissions
  - Use conditions to further restrict access based on tags, IP addresses, etc.

  {{ .Header }}

  ## Variables

  {{ .Inputs }}

  ## Outputs

  {{ .Outputs }}

  ## Resources

  {{ .Resources }}

output:
  file: README.md
  mode: replace

output-values:
  enabled: false
  from: ""

sort:
  enabled: true
  by: required

settings:
  anchor: true
  color: true
  description: true
  escape: true
  header: true
  html: true
  indent: 2
  required: true
  sensitive: true
  type: true
