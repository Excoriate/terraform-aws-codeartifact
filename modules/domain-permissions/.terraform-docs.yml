---
formatter: markdown table

sections:
  hide: []
  show:
    - inputs
    - outputs
    - resources

content: |-
  # AWS CodeArtifact Domain Permissions Module

  ## Overview

  This Terraform module manages permissions policies for an existing AWS CodeArtifact Domain, allowing controlled access to domain resources.

  ### üîë Key Features
  - **Policy Management**: Applies `aws_codeartifact_domain_permissions_policy` to an existing domain.
  - **Flexible Configuration**: Constructs policy dynamically from baseline principal lists (`read_principals`, `list_repo_principals`, `authorization_token_principals`) and custom statements (`custom_policy_statements`).
  - **Policy Override**: Allows providing a complete JSON policy document (`policy_document_override`) which takes precedence over dynamic construction.
  - **Cross-Account Support**: Handles domain ownership via `domain_owner`.
  - **Controlled Access**: Enables fine-grained permissions management at the domain level.
  - **Modular Design**: Separates domain policy management from domain creation.

  ### üìã Usage Guidelines
  1. Ensure the target CodeArtifact domain exists.
  2. Provide the `domain_name`.
  3. **Choose Policy Method:**
     *   **Option A (Dynamic Construction):** Define principals for baseline access using `read_principals`, `list_repo_principals`, `authorization_token_principals` and/or provide specific IAM policy statement objects via `custom_policy_statements`. Leave `policy_document_override` as `null`.
     *   **Option B (Full Override):** Provide a complete, valid JSON policy string to `policy_document_override`. The baseline and custom statement variables will be ignored.
  4. If the domain is in another account, specify `domain_owner`.
  5. Use `policy_revision` for optimistic locking if needed.

  **Example (Dynamic Construction):**
  ```hcl
  module "codeartifact_domain_permissions" {
    source = "path/to/module"

    # Basic Configuration
    is_enabled  = true
    domain_name = "my-company-packages"

    # Baseline Permissions (Example)
    read_principals      = ["arn:aws:iam::111122223333:role/ReaderRole"]
    list_repo_principals = ["arn:aws:iam::111122223333:role/DeveloperRole"]

    # Custom Permissions (Example)
    custom_policy_statements = [
        {
          Effect = "Allow"
          Principal = { AWS = "arn:aws:iam::123456789012:role/DeveloperRole" }
          Action = [
            "codeartifact:ReadFromRepository",
            "codeartifact:DescribeRepository",
            "codeartifact:ListRepositories"
          ]
          Resource = "*"
        }
      ]
    })

    # Optional: Specify domain owner if different account
    # domain_owner = "123456789012"

    # Tagging
    tags = {
      Environment = "production"
      Project     = "package-management"
      ManagedBy   = "Terraform"
    }
  }
  ```

  ## Security Considerations

  - üîí Follow least privilege principle in domain policies
  - üë• Use targeted Principal declarations instead of wildcards
  - üîê Limit repository creation and deletion rights
  - üìù Regularly audit domain policies

  ## Policy Structure Guidelines

  - Define specific actions instead of using wildcards
  - Explicitly list resources when possible
  - Consider separating read and write permissions
  - Use conditions to further restrict access based on tags, IP addresses, etc.

  {{ .Header }}

  ## Variables

  {{ .Inputs }}

  ## Outputs

  {{ .Outputs }}

  ## Resources

  {{ .Resources }}

output:
  file: README.md
  mode: replace

output-values:
  enabled: false
  from: ""

sort:
  enabled: true
  by: required

settings:
  anchor: true
  color: true
  description: true
  escape: true
  header: true
  html: true
  indent: 2
  required: true
  sensitive: true
  type: true
