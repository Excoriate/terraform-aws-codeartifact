---
formatter: markdown table

sections:
  hide: []
  show:
    - inputs
    - outputs
    # Show modules called by this example (which is just the domain-permissions module)
    - modules
    # Do not show resources directly created by the example itself (usually just the temp domain)
    # - resources

content: |-
  # Dynamic Policy Construction Example: AWS CodeArtifact Domain Permissions Module

  ## Overview
  > **Note:** This example demonstrates the dynamic policy construction features of the `domain-permissions` module found in `modules/domain-permissions`. It applies a policy to a **temporary** CodeArtifact domain created by the example itself.

  ### ðŸ”‘ Key Features Demonstrated
  - Calling the `domain-permissions` module.
  - Using fixtures (`fixtures/*.tfvars`) to test different dynamic policy configurations:
    - Default (no inputs): Module should not create a policy resource.
    - Using only `read_principals`.
    - Using only `list_repo_principals`.
    - Using only `authorization_token_principals`.
    - Using only `custom_policy_statements`.
    - Combining baseline principals (`read_principals`, `list_repo_principals`).
    - Combining baseline principals and `custom_policy_statements`.
  - **Note:** This example specifically avoids using `policy_document_override` to focus on dynamic construction. See the `advanced-policy-override` example for that feature.

  ### ðŸ“‹ Usage Guidelines
  1.  **Configure:** (Optional) Modify fixtures in `fixtures/` with valid principal ARNs if desired. The example creates its own domain.
  2.  **Initialize:** Run `terraform init`.
  3.  **Plan:** Use `make plan-<fixture_name>` (e.g., `make plan-read_only`, `make plan-combined_all`). Review the generated policy document in the plan output.
  4.  **Apply:** Use `make apply-<fixture_name>`.
  5.  **Destroy:** Use `make destroy-<fixture_name>`.
  6.  **Cycle:** Use `make cycle-<fixture_name>` to run plan, apply, and destroy sequentially.

  {{ .Header }}

  ## Example Inputs

  {{ .Inputs }}

  ## Example Outputs

  {{ .Outputs }}

  ## Modules Called

  {{ .Modules }}

output:
  file: README.md
  mode: inject # Use inject to add docs to README.md
  template: |-
    <!-- BEGIN_TF_DOCS -->
    {{ .Content }}
    <!-- END_TF_DOCS -->

settings:
  anchor: true
  color: true
  description: true
  escape: true
  header: true
  html: true
  indent: 2
  required: true
  sensitive: true
  type: true
