---
name: 🧩 TF Module-Specific CI

on:
  workflow_dispatch:
    inputs:
      module_name:
        description: 'Terraform module name to validate (mandatory)'
        required: true
        type: string
      run_unit_tests:
        description: 'Run unit tests (readonly only)'
        required: false
        type: boolean
        default: true
      run_examples_tests:
        description: 'Run examples tests (readonly only)'
        required: false
        type: boolean
        default: false
      use_aws_credentials:
        description: 'Use AWS credentials for tests (if not provided, mock credentials will be used)'
        required: false
        type: boolean
        default: false
      aws_access_key:
        description: 'AWS Access Key (only used if "Use AWS credentials" is enabled)'
        required: false
        type: string
      aws_secret_key:
        description: 'AWS Secret Key (only used if "Use AWS credentials" is enabled)'
        required: false
        type: string
      aws_region:
        description: 'AWS Region (only used if "Use AWS credentials" is enabled)'
        required: false
        type: string
        default: 'us-east-1'

permissions:
  contents: read
  pull-requests: read

env:
  TERRAFORM_VERSION: '1.11.2'
  TFLINT_VERSION: 'latest'
  TERRAFORM_DOCS_VERSION: 'latest'
  GO_VERSION: '1.21'
  TF_PLUGIN_CACHE_DIR: '${{ github.workspace }}/.terraform.d/plugin-cache'

jobs:
  ci-module:
    name: 🌐 Module Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 🛠️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: 🔧 Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: ${{ env.TFLINT_VERSION }}

      - name: 🗂️ Cache TFLint Plugins
        uses: actions/cache@v4
        with:
          path: ~/.tflint.d/plugins
          key: ${{ runner.os }}-tflint-${{ hashFiles('modules/${{ inputs.module_name }}/.tflint.hcl') }}

      - name: 🧰 Setup Terraform Docs
        run: |
          curl -sSLo ./terraform-docs.tar.gz https://terraform-docs.io/dl/v0.16.0/terraform-docs-v0.16.0-$(uname)-amd64.tar.gz
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          sudo mv terraform-docs /usr/local/bin/

      - name: 🌿 Module Preparation
        working-directory: modules/${{ inputs.module_name }}
        run: |
          echo "🔍 Validating module: ${{ inputs.module_name }}"
          echo "📂 Current directory: $(pwd)"

      - name: 🧹 Terraform Format Check
        working-directory: modules/${{ inputs.module_name }}
        run: |
          echo "✨ Checking Terraform code formatting..."
          terraform fmt -check -recursive

      - name: 🔍 TFLint Validation
        working-directory: modules/${{ inputs.module_name }}
        run: |
          echo "🕵️ Running TFLint for module: ${{ inputs.module_name }}"
          tflint --version
          tflint --init
          tflint -f compact
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: 📄 Terraform Docs Validation
        working-directory: modules/${{ inputs.module_name }}
        run: |
          echo "📝 Checking required documentation files..."

          # Step 1: Verify README.md exists
          if [ ! -f README.md ]; then
            echo "❌ Missing README.md file in module: ${{ inputs.module_name }}"
            exit 1
          fi
          echo "✅ README.md found"

          # Step 2: Verify .terraform-docs.yml exists
          if [ ! -f .terraform-docs.yml ]; then
            echo "❌ Missing .terraform-docs.yml file in module: ${{ inputs.module_name }}"
            exit 1
          fi
          echo "✅ .terraform-docs.yml found"

          echo "✅ All required documentation files are present"

      - name: 🏗️ Terraform Initialization
        working-directory: modules/${{ inputs.module_name }}
        run: |
          echo "🚀 Initializing Terraform module..."
          terraform init -backend=false

      - name: 🧪 Terraform Validation
        working-directory: modules/${{ inputs.module_name }}
        run: |
          echo "🔬 Validating Terraform module configuration..."
          terraform validate

  discover-test-targets:
    name: 🔍 Discover Test Targets
    runs-on: ubuntu-latest
    outputs:
      examples: ${{ steps.find-examples.outputs.examples }}
      unit_tests_exist: ${{ steps.check-unit-tests.outputs.exists }}
      examples_tests_exist: ${{ steps.check-examples-tests.outputs.exists }}
    steps:
      - uses: actions/checkout@v4

      - name: 🔎 Find Example Implementations
        id: find-examples
        run: |
          # Find all directories under the example module directory
          if [ -d "examples/${{ inputs.module_name }}" ]; then
            EXAMPLES=$(find "examples/${{ inputs.module_name }}" -mindepth 1 -maxdepth 1 -type d -exec basename {} \; | jq -R -s -c 'split("\n") | map(select(. != ""))')
            echo "examples=${EXAMPLES}" >> $GITHUB_OUTPUT
            echo "🌟 Discovered Examples: ${EXAMPLES}"
          else
            echo "examples=[]" >> $GITHUB_OUTPUT
            echo "⚠️ No examples directory found for module: ${{ inputs.module_name }}"
          fi

      - name: 🔎 Check for Unit Tests
        id: check-unit-tests
        run: |
          UNIT_TEST_DIR="tests/modules/${{ inputs.module_name }}/unit"
          if [ -d "$UNIT_TEST_DIR" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "🔬 Unit Tests Exist: true"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "🔬 Unit Tests Exist: false"
          fi

      - name: 🔎 Check for Examples Tests
        id: check-examples-tests
        run: |
          EXAMPLES_TEST_DIR="tests/modules/${{ inputs.module_name }}/examples"
          if [ -d "$EXAMPLES_TEST_DIR" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "🔬 Examples Tests Exist: true"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "🔬 Examples Tests Exist: false"
          fi

  ci-examples:
    name: 🌈 Example Validation - ${{ matrix.example }}
    needs: [ci-module, discover-test-targets]
    runs-on: ubuntu-latest
    if: ${{ needs.discover-test-targets.outputs.examples != '[]' && needs.discover-test-targets.outputs.examples != '' }}
    strategy:
      fail-fast: false
      matrix:
        example: ${{ fromJson(needs.discover-test-targets.outputs.examples) }}
    steps:
      - uses: actions/checkout@v4

      - name: 🛠️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: 🧪 Validate Example - ${{ matrix.example }}
        run: |
          echo "🔍 Validating example: ${{ matrix.example }}"

          EXAMPLE_PATH="examples/${{ inputs.module_name }}/${{ matrix.example }}"
          echo "📂 Validating directory: ${EXAMPLE_PATH}"

          # Change to example directory
          cd "${EXAMPLE_PATH}"

          # Terraform fmt check
          echo "✨ Checking Terraform formatting..."
          terraform fmt -check -recursive

          # Terraform init
          echo "🚀 Initializing Terraform example..."
          terraform init -backend=false

          # Terraform validate
          echo "🧪 Validating Terraform configuration..."
          terraform validate

  ci-terratest-unit-readonly:
    name: 🧪 Unit Tests (Readonly)
    needs: [ci-module, discover-test-targets]
    runs-on: ubuntu-latest
    if: ${{ inputs.run_unit_tests == true && needs.discover-test-targets.outputs.unit_tests_exist == 'true' }}
    env:
      # Set AWS credentials based on user input or use mock credentials
      AWS_ACCESS_KEY_ID: ${{ inputs.use_aws_credentials == true && inputs.aws_access_key != '' && inputs.aws_access_key ||
        'mock-access-key' }}
      AWS_SECRET_ACCESS_KEY: ${{ inputs.use_aws_credentials == true && inputs.aws_secret_key != '' && inputs.aws_secret_key
        || 'mock-secret-key' }}
      AWS_REGION: ${{ inputs.use_aws_credentials == true && inputs.aws_region || 'us-east-1' }}
      # For read-only tests, we need to set these regardless of credentials source
      TF_CLI_ARGS: "-refresh=false"
      TF_SKIP_PROVIDER_VERIFY: "1"
      # Skip actual AWS operations when using mock credentials
      TF_VAR_skip_credentials_validation: ${{ inputs.use_aws_credentials != true && 'true' || 'false' }}
      TF_VAR_skip_requesting_account_id: ${{ inputs.use_aws_credentials != true && 'true' || 'false' }}
      TF_VAR_skip_metadata_api_check: "true"
    steps:
      - uses: actions/checkout@v4

      - name: 🛠️ Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: 🔧 Create Terraform Plugin Cache Directory
        run: |
          mkdir -p ${{ env.TF_PLUGIN_CACHE_DIR }}

      - name: 📝 Display Credential Configuration
        run: |
          echo "🔐 Using AWS credentials: ${{ inputs.use_aws_credentials == true && 'User-provided' || 'Mock credentials' }}"
          echo "🌎 AWS Region: ${{ env.AWS_REGION }}"
          if [[ "${{ inputs.use_aws_credentials }}" != "true" ]]; then
            echo "⚠️ Using mock credentials with provider verification disabled"
          fi

      - name: 🧪 Run Unit Tests (Readonly)
        working-directory: tests
        run: |
          echo "🚀 Running Readonly Unit Tests for module: ${{ inputs.module_name }}"

          # Clean up any existing state before running
          find ../modules/${{ inputs.module_name }} -name ".terraform" -type d -exec rm -rf {} \; 2>/dev/null || true
          find ../modules/${{ inputs.module_name }} -name ".terraform.lock.hcl" -type f -delete 2>/dev/null || true

          # Ensure Go modules are up to date
          go mod tidy

          # Run the tests with appropriate tags
          # Using -v for verbose output and -count=1 to disable caching
          echo "🧪 Running read-only unit tests with ${{ inputs.use_aws_credentials == true && 'user-provided' || 'mock' }} credentials"
          go test -v -tags 'readonly,unit' -count=1 ./modules/${{ inputs.module_name }}/unit/...

  ci-terratest-examples-readonly:
    name: 🧪 Examples Tests (Readonly)
    needs: [ci-module, discover-test-targets]
    runs-on: ubuntu-latest
    if: ${{ inputs.run_examples_tests == true && needs.discover-test-targets.outputs.examples_tests_exist == 'true' }}
    env:
      # Set AWS credentials based on user input or use mock credentials
      AWS_ACCESS_KEY_ID: ${{ inputs.use_aws_credentials == true && inputs.aws_access_key != '' && inputs.aws_access_key ||
        'mock-access-key' }}
      AWS_SECRET_ACCESS_KEY: ${{ inputs.use_aws_credentials == true && inputs.aws_secret_key != '' && inputs.aws_secret_key
        || 'mock-secret-key' }}
      AWS_REGION: ${{ inputs.use_aws_credentials == true && inputs.aws_region || 'us-east-1' }}
      # For read-only tests, we need to set these regardless of credentials source
      TF_CLI_ARGS: "-refresh=false"
      TF_SKIP_PROVIDER_VERIFY: "1"
      # Skip actual AWS operations when using mock credentials
      TF_VAR_skip_credentials_validation: ${{ inputs.use_aws_credentials != true && 'true' || 'false' }}
      TF_VAR_skip_requesting_account_id: ${{ inputs.use_aws_credentials != true && 'true' || 'false' }}
      TF_VAR_skip_metadata_api_check: "true"
    steps:
      - uses: actions/checkout@v4

      - name: 🛠️ Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: 🔧 Create Terraform Plugin Cache Directory
        run: |
          mkdir -p ${{ env.TF_PLUGIN_CACHE_DIR }}

      - name: 📝 Display Credential Configuration
        run: |
          echo "🔐 Using AWS credentials: ${{ inputs.use_aws_credentials == true && 'User-provided' || 'Mock credentials' }}"
          echo "🌎 AWS Region: ${{ env.AWS_REGION }}"
          if [[ "${{ inputs.use_aws_credentials }}" != "true" ]]; then
            echo "⚠️ Using mock credentials with provider verification disabled"
          fi

      - name: 🧪 Run Examples Tests (Readonly)
        working-directory: tests
        run: |
          echo "🚀 Running Readonly Examples Tests for module: ${{ inputs.module_name }}"

          # Clean up any existing state before running
          find ../modules/${{ inputs.module_name }} -name ".terraform" -type d -exec rm -rf {} \; 2>/dev/null || true
          find ../modules/${{ inputs.module_name }} -name ".terraform.lock.hcl" -type f -delete 2>/dev/null || true

          # Find all terraform example directories and clean them
          find ../examples/${{ inputs.module_name }} -name ".terraform" -type d -exec rm -rf {} \; 2>/dev/null || true
          find ../examples/${{ inputs.module_name }} -name ".terraform.lock.hcl" -type f -delete 2>/dev/null || true

          # Ensure Go modules are up to date
          go mod tidy

          # Run the tests with appropriate tags
          # Using -v for verbose output and -count=1 to disable caching
          echo "🧪 Running read-only examples tests with ${{ inputs.use_aws_credentials == true && 'user-provided' || 'mock' }} credentials"
          go test -v -tags 'readonly,examples' -count=1 ./modules/${{ inputs.module_name }}/examples/...

  summary:
    name: 🏁 Validation Summary
    needs:
      - ci-module
      - ci-examples
      - ci-terratest-unit-readonly
      - ci-terratest-examples-readonly
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: 📊 Workflow Status
        run: |
          echo "🚀 Module-Specific Terraform CI Complete!"
          echo "✅ Module: ${{ inputs.module_name }}"

          echo "📋 Test Execution Summary:"
          echo "  - Module Validation: ${{ needs.ci-module.result }}"
          echo "  - Examples Validation: ${{ needs.ci-examples.result == 'skipped' && 'Not Applicable' || needs.ci-examples.result }}"
          echo "  - Unit Tests (Readonly): ${{ (inputs.run_unit_tests == false || needs.ci-terratest-unit-readonly.result == 'skipped') && 'Not Run' || needs.ci-terratest-unit-readonly.result }}"
          echo "  - Examples Tests (Readonly): ${{ (inputs.run_examples_tests == false || needs.ci-terratest-examples-readonly.result == 'skipped') && 'Not Run' || needs.ci-terratest-examples-readonly.result }}"

          echo "🔐 Credential Configuration:"
          echo "  - Using AWS Credentials: ${{ inputs.use_aws_credentials == true && 'Yes (User-provided)' || 'No (Mock credentials)' }}"
          echo "  - AWS Region: ${{ inputs.use_aws_credentials == true && inputs.aws_region || 'us-east-1 (default)' }}"

          # Check the status of all jobs
          if [[ "${{ needs.ci-module.result }}" != "success" ]]; then
            echo "❌ Module validation failed"
            exit 1
          fi

          # ci-examples may be skipped if there are no examples
          if [[ "${{ needs.ci-examples.result }}" != "success" && "${{ needs.ci-examples.result }}" != "skipped" ]]; then
            echo "❌ Examples validation failed"
            exit 1
          fi

          # Unit tests may be skipped if disabled or no unit tests exist
          if [[ "${{ inputs.run_unit_tests }}" == "true" && "${{ needs.ci-terratest-unit-readonly.result }}" != "success" && "${{ needs.ci-terratest-unit-readonly.result }}" != "skipped" ]]; then
            echo "❌ Unit tests (readonly) failed"
            exit 1
          fi

          # Examples tests may be skipped if disabled or no examples tests exist
          if [[ "${{ inputs.run_examples_tests }}" == "true" && "${{ needs.ci-terratest-examples-readonly.result }}" != "success" && "${{ needs.ci-terratest-examples-readonly.result }}" != "skipped" ]]; then
            echo "❌ Examples tests (readonly) failed"
            exit 1
          fi

          echo "✅ All required checks passed!"
